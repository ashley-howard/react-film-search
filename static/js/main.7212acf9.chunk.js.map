{"version":3,"sources":["components/filmCard.js","components/SearchFilms.js","App.js","reportWebVitals.js","index.js"],"names":["FilmCard","film","className","src","poster_path","alt","title","release_date","slice","vote_average","vote_count","overview","SearchFilms","useState","query","setQuery","films","setFilms","searchFilms","e","a","preventDefault","url","fetch","res","json","data","results","console","log","error","onSubmit","htmlFor","value","onChange","target","type","name","placeholder","filter","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEe,SAASA,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAC/B,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,cACXC,IAAG,0DAAqDF,EAAKG,aAC7DC,IAAKJ,EAAKK,MAAQ,YAEtB,sBAAKJ,UAAU,gBAAf,UACI,qBAAIA,UAAU,cAAd,UAA6BD,EAAKK,MAAlC,MAA4CL,EAAKM,aAAaC,MAAM,EAAG,GAAvE,OACA,+CAAkBP,EAAKM,gBACvB,yCAAgC,GAApBN,EAAKQ,aAAjB,MAAuCR,EAAKS,WAA5C,aACA,mBAAGR,UAAU,aAAb,SAA2BD,EAAKU,iBCVjC,SAASC,IAAe,IAAD,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAERF,mBAAS,IAFD,mBAE3BG,EAF2B,KAEpBC,EAFoB,KAI5BC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBACIC,EAFU,kHAEuGR,EAFvG,iDAKMS,MAAMD,GALZ,cAKNE,EALM,gBAMOA,EAAIC,OANX,OAMNC,EANM,OAOZT,EAASS,EAAKC,SACdC,QAAQC,IAAIH,EAAKC,SARL,kDAUZC,QAAQE,MAAR,MAVY,0DAAH,sDAcjB,OACI,qCACI,uBAAMC,SAAUb,EAAhB,UACI,wBAAOc,QAAQ,QAAf,uBAEN,uBAAOC,MAAOnB,EAAOoB,SAAU,SAACf,GAAD,OAAOJ,EAASI,EAAEgB,OAAOF,QAAQG,KAAK,OAAOC,KAAK,QAAQC,YAAY,uBAE/F,wBAAQF,KAAK,SAAb,uBAGJ,qBAAKlC,UAAU,YAAf,SACKc,EAAMuB,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,eAAaoC,KAAI,SAAAvC,GAAI,OAC5C,cAACD,EAAD,CAAUC,KAAMA,GAAWA,EAAKwC,YCpBrCC,MAVf,WACE,OACE,sBAAKxC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,+BAEA,cAACU,EAAD,QCIS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7212acf9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default function FilmCard({ film }) {\r\n    return (\r\n        <div className=\"card\">\r\n            <img className=\"card--image\"\r\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`}\r\n                alt={film.title + ' poster'}\r\n            />\r\n            <div className=\"card--content\">\r\n                <h3 className=\"card--title\">{film.title} ({+film.release_date.slice(0, 4)})</h3>\r\n                <p>RELEASE DATE: {film.release_date}</p>\r\n                <p>RATING: {film.vote_average * 10}% ({film.vote_count} votes)</p>\r\n                <p className=\"card--desc\">{film.overview}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\"\r\nimport FilmCard from \"./filmCard\";\r\n\r\nexport default function SearchFilms() {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [films, setFilms] = useState([]);\r\n\r\n    const searchFilms = async (e) => {\r\n        e.preventDefault();\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=f11bdea0ade8529741eb520f83d9d8ac&language=en-UK&query=${query}&page=1&include_adult=false`;\r\n\r\n        try {\r\n            const res = await fetch(url)\r\n            const data = await res.json()\r\n            setFilms(data.results)\r\n            console.log(data.results)\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={searchFilms}>\r\n                <label htmlFor=\"query\">\r\n                    Film Name:\r\n          <input value={query} onChange={(e) => setQuery(e.target.value)} type=\"text\" name=\"query\" placeholder=\"e.g. The Matrix\" />\r\n                </label>\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            <div className=\"card-list\">\r\n                {films.filter(film => film.poster_path).map(film => (\r\n                    <FilmCard film={film} key={film.id} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.scss';\nimport SearchFilms from \"./components/SearchFilms\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">React Film Search</h1>\n\n      <SearchFilms />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}